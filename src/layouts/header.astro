---
import type { PathsWithoutIconsAsEntries } from './utils/get-icon-from-pathname'
import getIconFromPathName from './utils/get-icon-from-pathname'
import { getWebsitePaths } from '@/utils/general'
// import Search from '@/components/header/search/index'
import '@/styles/header-blur.css'
// import UserDropdownOptions from '@/components/header/user/index'
import type { User } from '@supabase/supabase-js'
// import RegisterOrLoginDropdown from '@/components/header/user/register-or-login-dropdown'

import getUserRole from '@/services/client/get-user-role'

interface Props {
  user?: User | null
}

const { user } = Astro.props
const currentUserRole = await getUserRole()

const { pathname } = Astro.url
const pathsWithoutIcons = getWebsitePaths({ pathname })

const paths = Object.fromEntries(
  (Object.entries(pathsWithoutIcons) as PathsWithoutIconsAsEntries).map(
    ([name, path]) => [
      name,
      { ...path, icon: getIconFromPathName(name, pathsWithoutIcons) }
    ]
  )
)
---

<header class="w-full fixed left-0 top-0 px-1 md:px-32 pt-7 z-50">
  <nav class="grid grid-cols-3 md:grid-cols-6 place-items-center text-sm">
    <div class="col-span-2 md:col-span-5 grid place-items-center">
      <ul
        id="navigation-container"
        class="flex items-center justify-center px-1 md:px-2 md:gap-5 border-2 border-primary rounded-full p-2 transition-all duration-300"
      >
        {
          Object.values(paths).map(({ icon: Icon, ...path }) =>
            path.url === '/' ? (
              <li>
                <a
                  href={path.url}
                  class:list={[
                    'p-1 px-2 grid place-items-center truncate',
                    { 'bg-primary text-white rounded-full': path.isCurrent },
                    { 'hover:text-primary transition-colors': !path.isCurrent }
                  ]}
                >
                  <span class="hidden md:block">{path.label}</span>
                  <span class="md:hidden">{Icon ? <Icon /> : path.label}</span>
                </a>
              </li>
            ) : (
              <li>
                <button
                  class:list={[
                    'p-1 px-2 grid place-items-center truncate',
                    { 'bg-primary text-white rounded-full': path.isCurrent },
                    { 'hover:text-primary transition-colors': !path.isCurrent }
                  ]}
                >
                  <span class="hidden md:block">{path.label}</span>
                  <span class="md:hidden">{Icon ? <Icon /> : path.label}</span>
                </button>
              </li>
            )
          )
        }
      </ul>
    </div>

    <div class="flex gap-2 justify-self-end">
      <!-- <Search client:load /> -->
      <!-- {
        user && currentUserRole ? (
          <UserDropdownOptions user={user} role={currentUserRole} client:load />
        ) : (
          <RegisterOrLoginDropdown client:load />
        )
      } -->
    </div>
  </nav>
</header>

<script>
  import blurBackgroundOnScroll from '@/utils/blur-on-scroll'

  blurBackgroundOnScroll({
    element: document.querySelector('#navigation-container')
  })
</script>
