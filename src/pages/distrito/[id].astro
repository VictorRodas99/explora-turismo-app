---
import { getImagesFromResponse, truncateText } from '@/utils/formatter'
import { getAssetsFromFolder } from '@/lib/cloudinary/assets'
import { Heart } from 'lucide-react'
import Gallery from '@/components/galleries/specific'
import Layout from '@/layouts/layout.astro'

import { getDistritoById } from '@/services/server/distritos'
import { getPointOfInterestByDistrict } from '@/services/server/points-of-interest'
import { getFilteredInterestPoints } from '@/utils/mappers'
import PlacesSection from './_offers'
import Events from './_events'
import WrongInfoBreadcrumb from '@/components/wrong-info-breadcrumb'
import ShowMoreDescription from './_show-more-description-dialog'
import { SITE_NAME } from '@/constants'
import ShareDialog from '@/components/sections/distrito/share-dialog'
import Points from './_points'
import MapComponent from '@/components/map'

const [distrito, interestPoints, { assets, error }] = await Promise.all([
  getDistritoById(Astro),
  getPointOfInterestByDistrict(Astro),
  getAssetsFromFolder({ folder: 'galeria' })
])

if (!distrito) {
  return Astro.redirect('/404', 404)
}

const filteredPoints = await getFilteredInterestPoints(interestPoints)
const images = getImagesFromResponse(assets)

const { id, name, description } = distrito
const shortDescription = truncateText(description, { maxWords: 66 })
---

<Layout title={`${SITE_NAME} | ${name}`}>
  <main class="flex flex-col gap-12 mt-20 py-8 md:py-12 px-32">
    <section class="flex flex-col gap-7">
      <div class="w-full flex justify-between">
        <h1 class="font-outfit text-4xl font-bold">{name}</h1>
        <div class="flex gap-3">
          <ShareDialog
            distrito={{ image: images?.at(0)?.url, name }}
            client:only="react"
          />
          <button
            class="flex gap-2 items-center text-sm p-2 hover:bg-gray-200 hover:rounded-md focus:scale-95 transition-all"
          >
            <Heart size={15} />
            <span> Guardar </span>
          </button>
        </div>
      </div>
      <Gallery
        images={images?.toReversed() ?? null}
        retrieveError={error}
        client:visible
      />
    </section>
    <div class="flex flex-row-reverse gap-10">
      <aside class="w-[40%]">
        <MapComponent
          coords={distrito.coords}
          popupName={distrito.name}
          client:only="react"
        />
      </aside>
      <div class="w-[60%]">
        <section class="flex flex-col gap-7 py-10 pt-0 border-b border-gray-300">
          <WrongInfoBreadcrumb>
            Si alguna información es errónea.
          </WrongInfoBreadcrumb>

          <p>{shortDescription}</p>
          {
            shortDescription.trim() !== description.trim() && (
              <ShowMoreDescription description={description} client:visible />
            )
          }
        </section>

        <section class="flex flex-col gap-7 py-10 border-b border-gray-300">
          <PlacesSection filteredPoints={filteredPoints} client:visible />
        </section>
        <section
          class="flex flex-col gap-7 py-10 border-b border-gray-300 overflow-hidden"
        >
          {
            Object.values(filteredPoints).every(
              (points) => points.length === 0
            ) ? (
              <>
                <WrongInfoBreadcrumb>
                  Si creés que esto es erróneo.{' '}
                </WrongInfoBreadcrumb>
                <h2 class="font-bold text-lg">
                  Parece que no hay lugares aún...
                </h2>
              </>
            ) : (
              <Points filteredPoints={filteredPoints} client:visible />
            )
          }
        </section>
        <section
          class="flex flex-col gap-7 py-10 border-b border-gray-300 overflow-hidden"
        >
          <Events distritoId={id} client:visible />
        </section>
      </div>
    </div>
  </main>
</Layout>
